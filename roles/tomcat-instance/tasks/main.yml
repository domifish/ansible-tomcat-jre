# Create Tomcat Configuration
# ---
    - name: "Tomcat Configuration | Create base directory"
      file: path={{ tomcat_conf_dir }} state=directory mode=0755

    - name: "Tomcat Configuration | Create instance directory"
      file: path={{ tomcat_conf_dir }}/{{ item }}/{{ inst }} state=directory mode=0755
      with_items:
         - "instances"
         - "apps"

    - name: "Tomcat Configuration | Create security directory"
      file: path={{ tomcat_conf_dir }}/instances/{{ inst }}/security state=directory mode=0755 owner=tec-tomcat group=tec-tomcat

# Create Tomcat Instances
# ---
    - name: "Tomcat Instance | Ensure Tomcat instance already exist"
      file: path="{{ instance_dir }}" state=directory

    - name: "Tomcat Instance | Test si l instance est la"
      stat: path={{ instance_dir }}/conf/server.xml
      register: instance

    - name: "Tomcat Instance | Test si le CA est la"
      stat: path={{ tomcat_conf_dir }}/instances/{{ inst }}/security/cacert.jks
      register: cacert

    - name: "Tomcat Instance | Create Autosign CA"
      shell: "{{ jre_base_dir }}/default/bin/keytool -genkey -noprompt -alias tomcat -dname \"CN={{ ansible_hostname }}, OU=DSI, O=ONEY, L=CROIX, ST=NORD, C=FR\" -keyalg RSA -keystore {{ tomcat_conf_dir }}/instances/{{ inst }}/security/cacert.jks -storepass changeit -keypass changeit"
      when: cacert.stat.exists is defined and cacert.stat.exists == False

    - name: Create log directory
      file: path={{ log_dir }} state=directory mode=0755
 
    - name: Create directories in instance
      file: path={{ instance_dir }}/{{ item }} state=directory mode=0755
      with_items:
        - "temp"
        - "bin"
        - "lib"
        - "work"

    - name: Create instance
      command: cp -R {{ tomcat_base_dir }}/default/{{ item }} {{ instance_dir }}/{{ item }}
      with_items:
         - "conf"
         - "webapps"
      when: instance.stat.exists is defined and instance.stat.exists == False

    - name: Create Catalina/localhost directory
      file: path={{ instance_dir }}/webapps/Catalina/localhost state=directory recurse=yes
      when: instance.stat.exists is defined and instance.stat.exists == False

    - name: Restrict manager access
      template: src=manager.xmlj2 dest={{ instance_dir }}/{{ webapps }}/Catalina/localhost/manager.xml
      when: instance.stat.exists is defined and instance.stat.exists == False

    - name: Restrict host-manager access
      template: src=host-manager.xmlj2 dest={{ instance_dir }}/{{ webapps }}/Catalina/localhost/host-manager.xml
      when: instance.stat.exists is defined and instance.stat.exists == False

    - name: Create application log directory
      file: path={{ logapp_dir }} state=directory mode=0755

    - name: Create symlink
      file: src=/{{ log_dir }} dest={{ instance_dir }}/logs state=link
      when: instance.stat.exists is defined and instance.stat.exists == False

    - name: "Tomcat Instance | Create configuraiton file"
      template: src=tomcat.env.j2 dest={{ tomcat_conf_dir }}/instances/{{ inst }}/tomcat.env
     # tags:
     #   - test

    - name: "Tomcat Instance | Create jmx access file"
      template: src=jmx.access.j2 dest={{ tomcat_conf_dir }}/instances/{{ inst }}/security/jmx.access

    - name: "Tomcat Instance | Create jmx password file"
      template: src=jmx.password.j2 dest={{ tomcat_conf_dir }}/instances/{{ inst }}/security/jmx.password

    - name: "Tomcat Instance | Create server.xml file"
      template: src=server.xml.j2 dest={{ instance_dir }}/conf/server.xml

    - name: "Tomcat Instance | Create tomcat-users.xml file"
      template: src=tomcat-users.xml.j2 dest={{ instance_dir }}/conf/tomcat-users.xml

    - name: "Tomcat Instance | Create init script"
      template: src=tomcat_init.j2 dest=/usr/lib/systemd/system/tomcat-{{ inst }}.service

    - name: "Tomcat Instance | Reload systemd"
      shell: systemctl daemon-reload

    - name: "Tomcat Instance | Enable service"
      service: name=tomcat-{{ inst }}.service enabled=yes

      

# Manage Rights
# ---
    - name: Change ownership of Tomcat instance basedir
      file: path={{ instance_dir }} owner=tec-tomcat group=tec-tomcat mode=0755

    - name: Change ownership of Tomcat instance
      file: path={{ instance_dir }} owner={{ user }} group=tec-tomcat recurse=yes

    - name: Change ownership of Tomcat conf dir
      file: path={{ tomcat_conf_dir }}/{{ item }}/ owner=tec-tomcat group=tec-tomcat mode=0755
      with_items:
         - "instances"
         - "apps"

    - name: Change ownership of Tomcat conf dir
      file: path={{ tomcat_conf_dir }}/{{ item }}/{{ inst }} owner={{ user }} group=tec-tomcat recurse=yes mode=0755
      with_items:
         - "instances"
         - "apps"

    - name: Change ownership of Tomcat conf dir
      file: path={{ tomcat_conf_dir }}/instances/{{ inst }}/security/{{ item }} owner={{ user }} group=tec-tomcat mode=0600
      with_items:
         - "jmx.password"
         - "jmx.access"

    - name: Change ownership of Tomcat logs
      file: path=/var/log/tomcat owner=tec-tomcat group=tec-tomcat mode=0755

    - name: Change ownership of Tomcat logs
      file: path=/var/log/tomcat//{{ item }} owner=tec-tomcat group=tec-tomcat mode=0755
      with_items:
         - "instances"
         - "apps"

    - name: Change ownership of Tomcat logs
      file: path=/var/log/tomcat//{{ item }}/{{ inst }} owner={{ user }} group=tec-tomcat recurse=yes mode=0755
      with_items:
         - "instances"
         - "apps"

    - name: "Rights | Ensure sudoers config for exploit exists"
      lineinfile: "dest=/etc/sudoers.d/tomcat_admin create=yes state=present regexp='%exploit .* tomcat' line='%exploit ALL=(root)  NOPASSWD:  /usr/bin/systemctl * tomcat*'"

    - name: "Rights | Ensure exploit has sufficient rights"
      acl: name="{{ tomcat_conf_dir }}" entry="d:group:exploit:rwx" state=present recursive=yes

    - name: "Rights | Ensure %exploit has sufficient rights"
      acl: name="{{ instance_dir }}/conf/{{ item }}" entry="group:exploit:rwx" state=present
      with_items:
         - "server.xml"
         - "context.xml"

    - name: "Tomcat | Starting .."
      service: name=tomcat-{{ inst }} state=started
